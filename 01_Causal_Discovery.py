# Databricks notebook source
# MAGIC %run ./util/generate-data

# COMMAND ----------

# MAGIC %md
# MAGIC # Data Description

# COMMAND ----------

# MAGIC %md
# MAGIC We create one outcome of interest:
# MAGIC
# MAGIC Feature Name | Type | Details 
# MAGIC :--- |:--- |:--- 
# MAGIC **Revenue** | continuous | \\$ Annual revenue from customer given by the amount of software purchased
# MAGIC
# MAGIC We consider three possible treatments, the interventions whose impact we wish to measure:
# MAGIC
# MAGIC Feature Name | Type | Details 
# MAGIC :--- |:--- |:--- 
# MAGIC **Tech Support** | binary | whether the customer received tech support during the year
# MAGIC **Discount** | binary | whether the customer was given a discount during the year
# MAGIC **New Strategy** | binary | whether the customer was targeted for a new engagement strategy with different outreach behaviors
# MAGIC
# MAGIC Finally, we consider a variety of additional customer characteristics that may affect revenue. Including these types of features is crucial for causal analysis in order to map the full causal graph and separate the true effects of treatments on outcomes from other correlation generated by other influences. 
# MAGIC
# MAGIC Feature Name | Type | Details 
# MAGIC :--- |:--- |:--- 
# MAGIC **Global Flag** | binary | whether the customer has global offices
# MAGIC **Major Flag** | binary | whether the customer is a large consumer in their industry
# MAGIC **SMC Flag** | binary | whether the customer is a Small Medium Corporation (as opposed to large corporation)
# MAGIC **Commercial Flag** | binary | whether the customer's business is commercial (as opposed to public secor)
# MAGIC **Planning Summit** | binary | whether a sales team member held an outreach event with the customer during the year
# MAGIC **New Product Adoption** | binary | whether the customer signed a contract for any new products during the year
# MAGIC **IT Spend** | continuous | \\$ spent on IT-related purchases 
# MAGIC **Employee Count** | continuous | number of employees
# MAGIC **PC Count** | continuous | number of PCs used by the customer
# MAGIC **Size** | continuous | customer's total revenue in the previous calendar year
# MAGIC
# MAGIC In simulating the data, we maintain some key characteristics of the data from the real company example, including some correlation patterns between features and some potentially difficult data characteristics, such as large outliers.

# COMMAND ----------

# MAGIC %md
# MAGIC #Causal DAG discovery

# COMMAND ----------

import causallearn
from causallearn.search.ConstraintBased.PC import pc
%matplotlib inline

#parameters
parameters= {
  "node_names": input_df.columns, 
  "alpha": 0.01,
  "indep_test": "fisherz"
}
cg = pc(data=np.vstack(input_df.to_numpy()), **parameters)

# visualization using pydot
cg.draw_pydot_graph()

# COMMAND ----------

# Adding missing directions
added_directions = [
        {"from": "Size", "to": "IT Spend"},
        {"from": "IT Spend", "to": "Tech Support"},
        {"from": "Tech Support", "to": "New Product Adoption"},
        {"from": "Major Flag", "to": "New Engagement Strategy"},
        {"from": "Employee Count", "to": "PC Count"},
    ]
add_directions(
    causal_graph=cg,
    directions=added_directions,
)
cg.draw_pydot_graph()

# COMMAND ----------

# Correcting directions
inverted_directions = [
        {"from": "Revenue", "to": "Commercial Flag"},
        {"from": "New Engagement Strategy", "to": "Commercial Flag"},
        {"from": "Revenue", "to": "Commercial Flag"},
    ]
invert_directions(
    causal_graph=cg,
    directions=inverted_directions,
)

cg.draw_pydot_graph()

# COMMAND ----------

# Adding missing relations based on domain knowledge
added_missing_directed_relations = [
        {"from": "Global Flag", "to": "Revenue"},
        {"from": "Major Flag", "to": "Revenue"},
    ]

add_directions(
    causal_graph=cg,
    directions=added_missing_directed_relations,
)
cg.draw_pydot_graph()

# COMMAND ----------

# Add effect from all basic characteristics to incentives
account_basic_characteristics=[
        "Major Flag",
        "SMC Flag",
        "Commercial Flag",
        "IT Spend",
        "Employee Count",
        "PC Count",
    ]

add_relations_influencing_incentives(
    causal_graph=cg,
    incentives=["Discount", "Tech Support", "New Engagement Strategy"],
    account_basic_characteristics=account_basic_characteristics,
)
cg.draw_pydot_graph()

# COMMAND ----------

import mlflow

with mlflow.start_run(run_name="casual_discovery") as run:
  mlflow.log_params({
    **{
    "algorithm": "PC",
    "library": f"casual-learn=={get_version('causal-learn')}"}, 
    **parameters,    
    **{
      "added_directions": str(added_directions),
      "inverted_directions": str(inverted_directions),
      "added_missing_directed_relations": str(added_missing_directed_relations),
      "account_basic_characteristics": str(account_basic_characteristics)
    }
  })

  graph = to_pydot(cg.G, labels=input_df.columns)
  with open("graph.txt", "w") as f:
    f.write(graph)

  mlflow.log_artifact("graph.txt", artifact_path="graph") 

# COMMAND ----------


